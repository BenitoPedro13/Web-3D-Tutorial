import React, { Suspense } from "react";
import { useGraph } from "@react-three/fiber";
import { useGLTF, PerspectiveCamera, useAnimations, OrbitControls, Environment } from "@react-three/drei";
import { SkeletonUtils } from "three-stdlib";
import { Canvas, useFrame } from "@react-three/fiber";
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 ../public/model.glb 
*/

export function Model(props) {
  const group = React.useRef();
  const { nodes, materials, animations } = useGLTF("/model.glb");
  const { actions, names, mixer } = useAnimations(animations, group);

  const handlePlay = () => {
    actions["AnimationName"]?.play();
  };

  const handleStop = () => {
    actions["AnimationName"]?.stop();
  };

  React.useEffect(() => {
    if (actions && names.length && mixer) {
      // Play all animations or specific ones
      // actions[names[0]]?.play(); // Adjust to your desired animation
      // names.map(name => actions[name].play());

      // console.log(names);

      animations?.forEach((clip, index) => {
        if (!clip) {
          console.warn(`Animation at index ${index} is undefined.`);
          return;
        }

        try {
          console.log(clip.uuid);
          const action = mixer.clipAction(clip);
          if (!action) {
            console.error(`Unable to create action for animation clip:`, clip);
            return;
          }
          action.play();
        } catch (error) {
          console.error(`Error processing animation at index ${index}:`, error);
        }
      });
    }
  }, [actions, names]);


      useFrame((state, delta) => {
        if (mixer) {
          mixer.update(delta);
        }
      });

  return (
    <group ref={group} {...props} dispose={null}>
      <group name='Scene'>
        <mesh name='chao' geometry={nodes.chao.geometry} material={nodes.chao.material} position={[0, 0.204, 0]} scale={[1, 1, 1.172]} />
        <mesh name='parede' geometry={nodes.parede.geometry} material={nodes.parede.material} position={[0, 1.865, 0]} />
        <mesh name='Bola' geometry={nodes.Bola.geometry} material={materials["Material.001"]} position={[3.011, 2.281, 0]} />
        <mesh
          name='Torus'
          geometry={nodes.Torus.geometry}
          material={materials["Material.003"]}
          position={[3.011, 2.281, 0]}
          scale={[1.125, 0.678, 1.125]}
        />
        <mesh
          name='Sphere010'
          geometry={nodes.Sphere010.geometry}
          material={materials["Material.004"]}
          position={[3.056, 2.289, 0]}
          rotation={[0.014, 0, 0]}
          scale={0.048}
        >
          <mesh
            name='Sphere001'
            geometry={nodes.Sphere001.geometry}
            material={materials["Material.012"]}
            position={[-19.58, 3.531, 15.249]}
            scale={2.669}
          />
          <mesh
            name='Sphere002'
            geometry={nodes.Sphere002.geometry}
            material={materials["Material.013"]}
            position={[-19.58, 8.828, 15.249]}
            scale={2.008}
          />
          <mesh
            name='Sphere003'
            geometry={nodes.Sphere003.geometry}
            material={materials["Material.005"]}
            position={[-19.58, 12.956, 15.249]}
            scale={1.187}
          />
          <mesh
            name='Sphere004'
            geometry={nodes.Sphere004.geometry}
            material={materials["Material.009"]}
            position={[14.279, 3.531, 21.141]}
            scale={2.669}
          />
          <mesh
            name='Sphere005'
            geometry={nodes.Sphere005.geometry}
            material={materials["Material.010"]}
            position={[14.279, 8.828, 21.141]}
            scale={2.008}
          />
          <mesh
            name='Sphere006'
            geometry={nodes.Sphere006.geometry}
            material={materials["Material.011"]}
            position={[14.279, 12.956, 21.141]}
            scale={1.187}
          />
          <mesh
            name='Sphere007'
            geometry={nodes.Sphere007.geometry}
            material={materials["Material.008"]}
            position={[0.624, 3.531, -24.659]}
            scale={2.669}
          />
          <mesh
            name='Sphere008'
            geometry={nodes.Sphere008.geometry}
            material={materials["Material.007"]}
            position={[0.624, 8.828, -24.659]}
            scale={2.008}
          />
          <mesh
            name='Sphere009'
            geometry={nodes.Sphere009.geometry}
            material={materials["Material.006"]}
            position={[0.624, 12.956, -24.659]}
            scale={1.187}
          />
        </mesh>
        <mesh
          name='agua'
          geometry={nodes.agua.geometry}
          material={materials["Material.002"]}
          position={[3.607, 0.958, 0]}
          rotation={[0, 0, 0.055]}
        />
        <mesh
          name='ponte'
          geometry={nodes.ponte.geometry}
          material={nodes.ponte.material}
          position={[0.237, 0.197, 5.888]}
          scale={[1.353, 1, 4.763]}
        />
      </group>
    </group>
  );
}

useGLTF.preload("/model.glb");

const Scene = () => {
  return (
    <>
      <Suspense fallback={null}>
        <Model />
      </Suspense>
      {/* REPLACE THIS LIGHT AS NEEDED IT'S A GOOD START */}
      {/* <ambientLight intensity={20} /> */}
      <ambientLight intensity={0.1} />
    </>
  );
};

const ModelCanva = () => {
  return (
    <>
      {/* <div>
        <button onClick={handlePlay}>Play</button>
        <button onClick={handleStop}>Stop</button>
      </div> */}
      <Canvas shadows gl={{ physicallyCorrectLights: true }}>
        {/* REMOVE ORBIT CONTROLS TO FORCE THE CAMERA VIEW */}
        {/* <Environment
        preset='sunset'
        files={["/box/px.png", "/box/nx.png", "/box/py.png", "/box/ny.png", "/box/pz.png", "/box/nz.png"]}
        background={true}
      /> */}
        <OrbitControls />
        <Scene></Scene>
        <Environment
          //  preset='sunset'
          files='/box/sky.hdr'
          background={true}
        />
      </Canvas>
    </>
  );
};
export default ModelCanva;